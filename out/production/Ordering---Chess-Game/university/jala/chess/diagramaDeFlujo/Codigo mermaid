classDiagram
    interface GeneradorArreglos {
        + creacionArregloRandomico(): Object[]
        + creacionArreglo(tipo: String): Object[]
    }
    class GeneradorArregloEnteros {
        + creacionArregloRandomico(): Object[]
    }
    class GeneradorArregloCaracteres {
        + creacionArregloRandomico(): Object[]
    }
    class ClasePrincipalImpresionArgs {
        + mostrarConsola(algoritmo: String, tipo: String, color: String, tiempoEjecucion: int, arreglo: Object[]): void
        + imprimirArreglo(arreglo: Object[]): void
        + comprobacionTiempo(tiempoEjecucion: int): void
       }

       class ModeradorOrdenamientoNumeros {
         + ordenarValores(arreglo: Object[], algoritmo: String, tiempoEjecucion: int, color: String): int
       }

       class ModeradorOrdenamientoCaracteres {
         + ordenarValoresCaracteres(arreglo: Object[], algoritmo: String, tiempoEjecucion: int, color: String): int
       }

    interface AsignaciónArgs {
        +asignacion(args: String[]): String[]
        +verificar(argumento: String): String
    }
      class VerificacionAlgoritmo implements AsignaciónArgs {
            +verificar(argumento: String): String
        }

        class VerificacionNumeroPiezas implements AsignaciónArgs {
            +verificar(argumentoString: String): String
        }

        class VerificacionTipo implements AsignaciónArgs {
            +verificar(argumento: String): String
        }

        class VerificacionTipoOrdenamiento implements AsignaciónArgs {
            +verificar(argumento: String): String
        }

        class VerificacionValidadorNumeroPiezas {
            +verificar(argumento: String): boolean
        }

        class VerificacionValorNulo {
            +verificar(argumento: String, verificador: boolean): void
        }
    class AsignadorAlgoritmoRandomico {
        + verificarAlgoritmo(algoritmo: String): String
        + algortimoRadomico(): String
    }
     class EnumsPiezas {
            <<enumeration>>
            REY
            REYNA
            TORRE_I
            TORRE_II
            ALFIL_I
            ALFIL_II
            CABALLO_I
            CABALLO_II
            PEON_I
            PEON_II
            PEON_III
            PEON_IV
            PEON_V
            PEON_VI
            PEON_VII
            PEON
            +getCaracterPieza(): String
            +getNroPieza(): int
            +getSigla(): String
        }

    class ColorPiezas {
        +asignadorColorPiezas(color: String): List<String>
    }
    interface Ordenamiento {
        + ordenar(arreglo: String[], algoritmo: String): void
        + ordenarCaracteres(arreglo: String[]): void
    }
    class InsertionSort{
        + ordenarArreglo(valores: T[]): void
    }
    class QuickSort{
        + ordenarArreglo(valores: T[]): void
    }
    class SelectionSort{
        + ordenarArreglo(arreglo: T[]): void
    }
    class EnumsValoresLetras {
        + getValorNumerico(): int
    }
    class TiempoEjecucion() {
        + tiempo(): int
    }
    class OrdenamientoPiezas() {
        + AsignarValoresPiezas()
    }

     class ArgumentValidationException extends IllegalArgumentException {
        + ArgumentValidationException(message: String)
        + algortimoInvalido(): void
        + sinAlgortimo(): void
        + tipoInvalido(): void
        + sinTipo(): void
        + tipoOrdenamientoInvalido(): void
        + sinTipoOrdenamiento(): void
        + validadorNumeroPiezasInvalido(): void
        + sinValidadorNumeroPiezas(): void
        + numeroPiezasInvalido(): void
        + sinNumeroPiezas(): void
        + tiempoInvalido(): void
        + sinTiempo(): void
        }
     class Constantes {
        +CARACTER_SEPARADOR: String
        +ALGORITMO: String
        +TIPO: String
        +TIPO_ORDENAMIENTO: String
        +VALIDADOR_NUMERO_PIEZAS: String
        +NUMERO_PIEZAS: String
        +TIEMPO: String
        +VACIO: String
        +NULO: String
        +LIMITE_ARGUMENTOS: int
        +INSERTION_SORT: String
        +QUICK_SORT: String
        +SELECTION_SORT: String
        +NUMERICO: String
        +CARACTER: String
        +VALOR_VALIDADOR_NUMERO_PIEZAS: String
        +VALOR_MINIMO_PIEZAS_ELEGIDAS: int
        +VALOR_VALIDO_2: int
                +VALOR_VALIDO_4: int
                +VALOR_VALIDO_6: int
                +NUMERO_LIMITE_TABLERO: int
                +VALOR_VALIDO_10: int
                +VALOR_MAXIMO_PIEZAS: int
                +BLANCO: String
                +NEGRO: String
                +SIGLA_BLANCO: String
                +SIGLA_NEGRO: String
                +LINEA_SUPERIOR_TERMINAL: String
                +LINEA_SUPERIOR: String
                +LINEA_VACIA: String
                +LINEA_VACIA_TERMINAL: String
            }
     class Main {
        + main(args: String[]): void
     }